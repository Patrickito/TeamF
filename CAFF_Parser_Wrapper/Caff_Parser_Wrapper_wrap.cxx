/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Caff_Parser_Wrapper(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Caff_Parser_Wrapper(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Caff_Parser_Wrapper(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




typedef void (SWIGSTDCALL* CSharpExceptionCallback_t)(const char *);


CSharpExceptionCallback_t Invalid_Extension_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Extension_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Extension_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Extension_Exception(const char *msg) {
  Invalid_Extension_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Unable_To_Open_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Unable_To_Open_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Unable_To_Open_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Unable_To_Open_Exception(const char *msg) {
  Unable_To_Open_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Unable_To_Close_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Unable_To_Close_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Unable_To_Close_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Unable_To_Close_Exception(const char *msg) {
  Unable_To_Close_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Multiple_Header_Block_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Multiple_Header_Block_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Multiple_Header_Block_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Multiple_Header_Block_Exception(const char *msg) {
  Multiple_Header_Block_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Multiple_Credits_Block_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Multiple_Credits_Block_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Multiple_Credits_Block_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Multiple_Credits_Block_Exception(const char *msg) {
  Multiple_Credits_Block_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Caff_File_Size_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Caff_File_Size_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Caff_File_Size_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Caff_File_Size_Exception(const char *msg) {
  Invalid_Caff_File_Size_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Data_Size_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Data_Size_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Data_Size_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Data_Size_Exception(const char *msg) {
  Invalid_Data_Size_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Caff_Magic_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Caff_Magic_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Caff_Magic_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Caff_Magic_Exception(const char *msg) {
  Invalid_Caff_Magic_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Ciff_Magic_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Ciff_Magic_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Ciff_Magic_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Ciff_Magic_Exception(const char *msg) {
  Invalid_Ciff_Magic_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Block_Id_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Block_Id_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Block_Id_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Block_Id_Exception(const char *msg) {
  Invalid_Block_Id_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Block_Order_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Block_Order_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Block_Order_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Block_Order_Exception(const char *msg) {
  Invalid_Block_Order_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Header_Size_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Header_Size_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Header_Size_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Header_Size_Exception(const char *msg) {
  Invalid_Header_Size_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Caption_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Caption_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Caption_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Caption_Exception(const char *msg) {
  Invalid_Caption_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Tags_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Tags_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Tags_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Tags_Exception(const char *msg) {
  Invalid_Tags_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Year_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Year_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Year_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Year_Exception(const char *msg) {
  Invalid_Year_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Month_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Month_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Month_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Month_Exception(const char *msg) {
  Invalid_Month_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Day_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Day_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Day_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Day_Exception(const char *msg) {
  Invalid_Day_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Hour_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Hour_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Hour_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Hour_Exception(const char *msg) {
  Invalid_Hour_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Min_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Min_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Min_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Min_Exception(const char *msg) {
  Invalid_Min_ExceptionCallback(msg);
}


CSharpExceptionCallback_t Invalid_Date_ExceptionCallback = NULL;

extern "C" SWIGEXPORT
void SWIGSTDCALL Invalid_Date_ExceptionRegisterCallback(CSharpExceptionCallback_t customCallback) {
  Invalid_Date_ExceptionCallback = customCallback;
}

static void SWIG_CSharpSetPending_Invalid_Date_Exception(const char *msg) {
  Invalid_Date_ExceptionCallback(msg);
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <algorithm>
#include <array>
#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< char > *new_std_vector_Sl_char_Sg___SWIG_2(int capacity){
        std::vector< char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN char std_vector_Sl_char_Sg__getitemcopy(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< char >::value_type const &std_vector_Sl_char_Sg__getitem(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__setitem(std::vector< char > *self,int index,char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__AddRange(std::vector< char > *self,std::vector< char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__GetRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Insert(std::vector< char > *self,int index,char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__InsertRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveAt(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__Repeat(char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< char >(count, value);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_0(std::vector< char > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_1(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__SetRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Contains(std::vector< char > *self,char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_char_Sg__IndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_char_Sg__LastIndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Remove(std::vector< char > *self,char const &value){
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }

#include "parser.h"
#include "caff.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "Caff_Parser_Wrapper_wrap.h"

SwigDirector_Parser::SwigDirector_Parser() : Parser(), Swig::Director() {
  swig_init_callbacks();
}

Caff SwigDirector_Parser::parseCaff(std::string const filename) {
  SwigValueWrapper< Caff > c_result ;
  void * jresult = 0 ;
  char * jfilename  ;
  
  if (!swig_callbackparseCaff) {
    return Parser::parseCaff(filename);
  } else {
    jfilename = SWIG_csharp_string_callback((&filename)->c_str()); 
    jresult = (void *) swig_callbackparseCaff(jfilename);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Caff", 0);
      return c_result;
    }
    c_result = *(Caff *)jresult; 
  }
  return c_result;
}

SwigDirector_Parser::~SwigDirector_Parser() {
  
}


void SwigDirector_Parser::swig_connect_director(SWIG_Callback0_t callbackparseCaff) {
  swig_callbackparseCaff = callbackparseCaff;
}

void SwigDirector_Parser::swig_init_callbacks() {
  swig_callbackparseCaff = 0;
}

SwigDirector_Caff::SwigDirector_Caff(std::shared_ptr< CaffNative > caff) : Caff(caff), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Caff::~SwigDirector_Caff() {
  
}


unsigned __int64 SwigDirector_Caff::getAnimationNumber() {
  unsigned __int64 c_result = SwigValueInit< unsigned __int64 >() ;
  unsigned long long jresult = 0 ;
  
  if (!swig_callbackgetAnimationNumber) {
    return Caff::getAnimationNumber();
  } else {
    jresult = (unsigned long long) swig_callbackgetAnimationNumber();
    c_result = (unsigned __int64)jresult; 
  }
  return c_result;
}

unsigned __int16 SwigDirector_Caff::getYear() {
  unsigned __int16 c_result = SwigValueInit< unsigned __int16 >() ;
  unsigned short jresult = 0 ;
  
  if (!swig_callbackgetYear) {
    return Caff::getYear();
  } else {
    jresult = (unsigned short) swig_callbackgetYear();
    c_result = (unsigned __int16)jresult; 
  }
  return c_result;
}

unsigned __int8 SwigDirector_Caff::getMonth() {
  unsigned __int8 c_result = SwigValueInit< unsigned __int8 >() ;
  unsigned char jresult = 0 ;
  
  if (!swig_callbackgetMonth) {
    return Caff::getMonth();
  } else {
    jresult = (unsigned char) swig_callbackgetMonth();
    c_result = (unsigned __int8)jresult; 
  }
  return c_result;
}

unsigned __int8 SwigDirector_Caff::getDay() {
  unsigned __int8 c_result = SwigValueInit< unsigned __int8 >() ;
  unsigned char jresult = 0 ;
  
  if (!swig_callbackgetDay) {
    return Caff::getDay();
  } else {
    jresult = (unsigned char) swig_callbackgetDay();
    c_result = (unsigned __int8)jresult; 
  }
  return c_result;
}

unsigned __int8 SwigDirector_Caff::getHour() {
  unsigned __int8 c_result = SwigValueInit< unsigned __int8 >() ;
  unsigned char jresult = 0 ;
  
  if (!swig_callbackgetHour) {
    return Caff::getHour();
  } else {
    jresult = (unsigned char) swig_callbackgetHour();
    c_result = (unsigned __int8)jresult; 
  }
  return c_result;
}

unsigned __int8 SwigDirector_Caff::getMinute() {
  unsigned __int8 c_result = SwigValueInit< unsigned __int8 >() ;
  unsigned char jresult = 0 ;
  
  if (!swig_callbackgetMinute) {
    return Caff::getMinute();
  } else {
    jresult = (unsigned char) swig_callbackgetMinute();
    c_result = (unsigned __int8)jresult; 
  }
  return c_result;
}

std::vector< char > SwigDirector_Caff::getCreator() {
  std::vector< char > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackgetCreator) {
    return Caff::getCreator();
  } else {
    jresult = (void *) swig_callbackgetCreator();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::vector< char >", 0);
      return c_result;
    }
    c_result = *(std::vector< char > *)jresult; 
  }
  return c_result;
}

Caff::Ciff SwigDirector_Caff::getCaffAnimation(unsigned int const ix) {
  SwigValueWrapper< Caff::Ciff > c_result ;
  void * jresult = 0 ;
  unsigned int jix  ;
  
  if (!swig_callbackgetCaffAnimation) {
    return Caff::getCaffAnimation(ix);
  } else {
    jix = ix;
    jresult = (void *) swig_callbackgetCaffAnimation(jix);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type Caff::Ciff", 0);
      return c_result;
    }
    c_result = *(Caff::Ciff *)jresult; 
  }
  return c_result;
}

void SwigDirector_Caff::swig_connect_director(SWIG_Callback0_t callbackgetAnimationNumber, SWIG_Callback1_t callbackgetYear, SWIG_Callback2_t callbackgetMonth, SWIG_Callback3_t callbackgetDay, SWIG_Callback4_t callbackgetHour, SWIG_Callback5_t callbackgetMinute, SWIG_Callback6_t callbackgetCreator, SWIG_Callback7_t callbackgetCaffAnimation) {
  swig_callbackgetAnimationNumber = callbackgetAnimationNumber;
  swig_callbackgetYear = callbackgetYear;
  swig_callbackgetMonth = callbackgetMonth;
  swig_callbackgetDay = callbackgetDay;
  swig_callbackgetHour = callbackgetHour;
  swig_callbackgetMinute = callbackgetMinute;
  swig_callbackgetCreator = callbackgetCreator;
  swig_callbackgetCaffAnimation = callbackgetCaffAnimation;
}

void SwigDirector_Caff::swig_init_callbacks() {
  swig_callbackgetAnimationNumber = 0;
  swig_callbackgetYear = 0;
  swig_callbackgetMonth = 0;
  swig_callbackgetDay = 0;
  swig_callbackgetHour = 0;
  swig_callbackgetMinute = 0;
  swig_callbackgetCreator = 0;
  swig_callbackgetCaffAnimation = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_Clear(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_Add(void * jarg1, char jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TeamF_Api_CharVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TeamF_Api_CharVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_new_CharVector__SWIG_0() {
  void * jresult ;
  std::vector< char > *result = 0 ;
  
  result = (std::vector< char > *)new std::vector< char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_new_CharVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_new_CharVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< char > *)new_std_vector_Sl_char_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_TeamF_Api_CharVector_getitemcopy(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char result;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (char)std_vector_Sl_char_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_TeamF_Api_CharVector_getitem(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_setitem(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__setitem(arg1,arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_char_Sg__AddRange(arg1,(std::vector< char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_CharVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_Insert(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__Insert(arg1,arg2,(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__InsertRange(arg1,arg2,(std::vector< char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_char_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_CharVector_Repeat(char jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = 0 ;
  int arg2 ;
  char temp1 ;
  std::vector< char > *result = 0 ;
  
  temp1 = (char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__Repeat((char const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  std_vector_Sl_char_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_CharVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__SetRange(arg1,arg2,(std::vector< char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TeamF_Api_CharVector_Contains(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Contains(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TeamF_Api_CharVector_IndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__IndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TeamF_Api_CharVector_LastIndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__LastIndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TeamF_Api_CharVector_Remove(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Remove(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_delete_CharVector(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_Parser_parseCaff(void * jarg1, char * jarg2) {
  void * jresult ;
  Parser *arg1 = (Parser *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< Caff > result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      result = (arg1)->parseCaff(arg2);
    } catch(Invalid_Extension_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Extension_Exception((&_e)->what());
      return 0;
    }catch(Unable_To_Open_Exception &_e) {
      SWIG_CSharpSetPending_Unable_To_Open_Exception((&_e)->what());
      return 0;
    }catch(Unable_To_Close_Exception &_e) {
      SWIG_CSharpSetPending_Unable_To_Close_Exception((&_e)->what());
      return 0;
    } catch(Multiple_Header_Block_Exception &_e) {
      SWIG_CSharpSetPending_Multiple_Header_Block_Exception((&_e)->what());
      return 0;
    } catch(Multiple_Credits_Block_Exception &_e) {
      SWIG_CSharpSetPending_Multiple_Credits_Block_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Caff_File_Size_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Caff_File_Size_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Data_Size_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Data_Size_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Caff_Magic_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Caff_Magic_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Ciff_Magic_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Ciff_Magic_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Block_Id_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Block_Id_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Block_Order_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Block_Order_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Header_Size_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Header_Size_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Caption_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Caption_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Tags_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Tags_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Year_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Year_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Month_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Month_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Day_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Day_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Hour_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Hour_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Min_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Min_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Date_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Date_Exception((&_e)->what());
      return 0;
    }
  }
  jresult = new Caff((const Caff &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_Parser_parseCaffSwigExplicitParser(void * jarg1, char * jarg2) {
  void * jresult ;
  Parser *arg1 = (Parser *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< Caff > result;
  
  arg1 = (Parser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      result = (arg1)->Parser::parseCaff(arg2);
    } catch(Invalid_Extension_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Extension_Exception((&_e)->what());
      return 0;
    }catch(Unable_To_Open_Exception &_e) {
      SWIG_CSharpSetPending_Unable_To_Open_Exception((&_e)->what());
      return 0;
    }catch(Unable_To_Close_Exception &_e) {
      SWIG_CSharpSetPending_Unable_To_Close_Exception((&_e)->what());
      return 0;
    } catch(Multiple_Header_Block_Exception &_e) {
      SWIG_CSharpSetPending_Multiple_Header_Block_Exception((&_e)->what());
      return 0;
    } catch(Multiple_Credits_Block_Exception &_e) {
      SWIG_CSharpSetPending_Multiple_Credits_Block_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Caff_File_Size_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Caff_File_Size_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Data_Size_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Data_Size_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Caff_Magic_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Caff_Magic_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Ciff_Magic_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Ciff_Magic_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Block_Id_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Block_Id_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Block_Order_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Block_Order_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Header_Size_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Header_Size_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Caption_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Caption_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Tags_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Tags_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Year_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Year_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Month_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Month_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Day_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Day_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Hour_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Hour_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Min_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Min_Exception((&_e)->what());
      return 0;
    } catch(Invalid_Date_Exception &_e) {
      SWIG_CSharpSetPending_Invalid_Date_Exception((&_e)->what());
      return 0;
    }
  }
  jresult = new Caff((const Caff &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_delete_Parser(void * jarg1) {
  Parser *arg1 = (Parser *) 0 ;
  
  arg1 = (Parser *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_new_Parser() {
  void * jresult ;
  Parser *result = 0 ;
  
  result = (Parser *)new SwigDirector_Parser();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_Parser_director_connect(void *objarg, SwigDirector_Parser::SWIG_Callback0_t callback0) {
  Parser *obj = (Parser *)objarg;
  SwigDirector_Parser *director = static_cast<SwigDirector_Parser *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_Caff_Pixel_r_set(void * jarg1, unsigned char jarg2) {
  Caff::Pixel *arg1 = (Caff::Pixel *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Caff::Pixel *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_Pixel_r_get(void * jarg1) {
  unsigned char jresult ;
  Caff::Pixel *arg1 = (Caff::Pixel *) 0 ;
  unsigned char result;
  
  arg1 = (Caff::Pixel *)jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_Caff_Pixel_g_set(void * jarg1, unsigned char jarg2) {
  Caff::Pixel *arg1 = (Caff::Pixel *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Caff::Pixel *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_Pixel_g_get(void * jarg1) {
  unsigned char jresult ;
  Caff::Pixel *arg1 = (Caff::Pixel *) 0 ;
  unsigned char result;
  
  arg1 = (Caff::Pixel *)jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_Caff_Pixel_b_set(void * jarg1, unsigned char jarg2) {
  Caff::Pixel *arg1 = (Caff::Pixel *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Caff::Pixel *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_Pixel_b_get(void * jarg1) {
  unsigned char jresult ;
  Caff::Pixel *arg1 = (Caff::Pixel *) 0 ;
  unsigned char result;
  
  arg1 = (Caff::Pixel *)jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_new_Caff_Pixel() {
  void * jresult ;
  Caff::Pixel *result = 0 ;
  
  result = (Caff::Pixel *)new Caff::Pixel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_delete_Caff_Pixel(void * jarg1) {
  Caff::Pixel *arg1 = (Caff::Pixel *) 0 ;
  
  arg1 = (Caff::Pixel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_new_Caff_Ciff(void * jarg1) {
  void * jresult ;
  std::shared_ptr< CaffAnimation > arg1 ;
  std::shared_ptr< CaffAnimation > *argp1 ;
  Caff::Ciff *result = 0 ;
  
  argp1 = (std::shared_ptr< CaffAnimation > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< CaffAnimation >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Caff::Ciff *)new Caff::Ciff(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TeamF_Api_Caff_Ciff_getWidth(void * jarg1) {
  unsigned long long jresult ;
  Caff::Ciff *arg1 = (Caff::Ciff *) 0 ;
  unsigned __int64 result;
  
  arg1 = (Caff::Ciff *)jarg1; 
  result = (arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TeamF_Api_Caff_Ciff_getHeight(void * jarg1) {
  unsigned long long jresult ;
  Caff::Ciff *arg1 = (Caff::Ciff *) 0 ;
  unsigned __int64 result;
  
  arg1 = (Caff::Ciff *)jarg1; 
  result = (arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_Caff_Ciff_getCaption(void * jarg1) {
  void * jresult ;
  Caff::Ciff *arg1 = (Caff::Ciff *) 0 ;
  std::vector< char > result;
  
  arg1 = (Caff::Ciff *)jarg1; 
  result = (arg1)->getCaption();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_Caff_Ciff_getTags(void * jarg1) {
  void * jresult ;
  Caff::Ciff *arg1 = (Caff::Ciff *) 0 ;
  std::vector< char > result;
  
  arg1 = (Caff::Ciff *)jarg1; 
  result = (arg1)->getTags();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TeamF_Api_Caff_Ciff_getDuration(void * jarg1) {
  unsigned long long jresult ;
  Caff::Ciff *arg1 = (Caff::Ciff *) 0 ;
  unsigned __int64 result;
  
  arg1 = (Caff::Ciff *)jarg1; 
  result = (arg1)->getDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_Caff_Ciff_getPixelAt(void * jarg1, unsigned long long jarg2, unsigned long long jarg3) {
  void * jresult ;
  Caff::Ciff *arg1 = (Caff::Ciff *) 0 ;
  unsigned __int64 arg2 ;
  unsigned __int64 arg3 ;
  Caff::Pixel result;
  
  arg1 = (Caff::Ciff *)jarg1; 
  arg2 = (unsigned __int64)jarg2; 
  arg3 = (unsigned __int64)jarg3; 
  result = (arg1)->getPixelAt(arg2,arg3);
  jresult = new Caff::Pixel((const Caff::Pixel &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_delete_Caff_Ciff(void * jarg1) {
  Caff::Ciff *arg1 = (Caff::Ciff *) 0 ;
  
  arg1 = (Caff::Ciff *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_new_Caff(void * jarg1) {
  void * jresult ;
  std::shared_ptr< CaffNative > arg1 ;
  std::shared_ptr< CaffNative > *argp1 ;
  Caff *result = 0 ;
  
  argp1 = (std::shared_ptr< CaffNative > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::shared_ptr< CaffNative >", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Caff *)new SwigDirector_Caff(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_delete_Caff(void * jarg1) {
  Caff *arg1 = (Caff *) 0 ;
  
  arg1 = (Caff *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TeamF_Api_Caff_getAnimationNumber(void * jarg1) {
  unsigned long long jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int64 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->getAnimationNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_TeamF_Api_Caff_getAnimationNumberSwigExplicitCaff(void * jarg1) {
  unsigned long long jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int64 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->Caff::getAnimationNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_TeamF_Api_Caff_getYear(void * jarg1) {
  unsigned short jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int16 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->getYear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_TeamF_Api_Caff_getYearSwigExplicitCaff(void * jarg1) {
  unsigned short jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int16 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->Caff::getYear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_getMonth(void * jarg1) {
  unsigned char jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int8 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->getMonth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_getMonthSwigExplicitCaff(void * jarg1) {
  unsigned char jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int8 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->Caff::getMonth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_getDay(void * jarg1) {
  unsigned char jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int8 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->getDay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_getDaySwigExplicitCaff(void * jarg1) {
  unsigned char jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int8 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->Caff::getDay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_getHour(void * jarg1) {
  unsigned char jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int8 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->getHour();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_getHourSwigExplicitCaff(void * jarg1) {
  unsigned char jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int8 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->Caff::getHour();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_getMinute(void * jarg1) {
  unsigned char jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int8 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->getMinute();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TeamF_Api_Caff_getMinuteSwigExplicitCaff(void * jarg1) {
  unsigned char jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned __int8 result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->Caff::getMinute();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_Caff_getCreator(void * jarg1) {
  void * jresult ;
  Caff *arg1 = (Caff *) 0 ;
  std::vector< char > result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->getCreator();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_Caff_getCreatorSwigExplicitCaff(void * jarg1) {
  void * jresult ;
  Caff *arg1 = (Caff *) 0 ;
  std::vector< char > result;
  
  arg1 = (Caff *)jarg1; 
  result = (arg1)->Caff::getCreator();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_Caff_getCaffAnimation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< Caff::Ciff > result;
  
  arg1 = (Caff *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->getCaffAnimation(arg2);
  jresult = new Caff::Ciff((const Caff::Ciff &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeamF_Api_Caff_getCaffAnimationSwigExplicitCaff(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Caff *arg1 = (Caff *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< Caff::Ciff > result;
  
  arg1 = (Caff *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->Caff::getCaffAnimation(arg2);
  jresult = new Caff::Ciff((const Caff::Ciff &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TeamF_Api_Caff_director_connect(void *objarg, SwigDirector_Caff::SWIG_Callback0_t callback0, SwigDirector_Caff::SWIG_Callback1_t callback1, SwigDirector_Caff::SWIG_Callback2_t callback2, SwigDirector_Caff::SWIG_Callback3_t callback3, SwigDirector_Caff::SWIG_Callback4_t callback4, SwigDirector_Caff::SWIG_Callback5_t callback5, SwigDirector_Caff::SWIG_Callback6_t callback6, SwigDirector_Caff::SWIG_Callback7_t callback7) {
  Caff *obj = (Caff *)objarg;
  SwigDirector_Caff *director = static_cast<SwigDirector_Caff *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
}


#ifdef __cplusplus
}
#endif

