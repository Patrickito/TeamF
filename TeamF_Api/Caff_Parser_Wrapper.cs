//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TeamF_Api {

public partial class CharVector : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.IList<char>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CharVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CharVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CharVector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Caff_Parser_WrapperPINVOKE.delete_CharVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public CharVector(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (char element in c) {
      this.Add(element);
    }
  }

  public CharVector(global::System.Collections.Generic.IEnumerable<char> c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (char element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public char this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(char[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(char[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, char[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  public char[] ToArray() {
    char[] array = new char[this.Count];
    this.CopyTo(array);
    return array;
  }

  global::System.Collections.Generic.IEnumerator<char> global::System.Collections.Generic.IEnumerable<char>.GetEnumerator() {
    return new CharVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new CharVectorEnumerator(this);
  }

  public CharVectorEnumerator GetEnumerator() {
    return new CharVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class CharVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<char>
  {
    private CharVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public CharVectorEnumerator(CharVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public char Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (char)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    Caff_Parser_WrapperPINVOKE.CharVector_Clear(swigCPtr);
  }

  public void Add(char x) {
    Caff_Parser_WrapperPINVOKE.CharVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = Caff_Parser_WrapperPINVOKE.CharVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = Caff_Parser_WrapperPINVOKE.CharVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    Caff_Parser_WrapperPINVOKE.CharVector_reserve(swigCPtr, n);
  }

  public CharVector() : this(Caff_Parser_WrapperPINVOKE.new_CharVector__SWIG_0(), true) {
  }

  public CharVector(CharVector other) : this(Caff_Parser_WrapperPINVOKE.new_CharVector__SWIG_1(CharVector.getCPtr(other)), true) {
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public CharVector(int capacity) : this(Caff_Parser_WrapperPINVOKE.new_CharVector__SWIG_2(capacity), true) {
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  private char getitemcopy(int index) {
    char ret = Caff_Parser_WrapperPINVOKE.CharVector_getitemcopy(swigCPtr, index);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private char getitem(int index) {
    char ret = Caff_Parser_WrapperPINVOKE.CharVector_getitem(swigCPtr, index);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, char val) {
    Caff_Parser_WrapperPINVOKE.CharVector_setitem(swigCPtr, index, val);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(CharVector values) {
    Caff_Parser_WrapperPINVOKE.CharVector_AddRange(swigCPtr, CharVector.getCPtr(values));
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public CharVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = Caff_Parser_WrapperPINVOKE.CharVector_GetRange(swigCPtr, index, count);
    CharVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CharVector(cPtr, true);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, char x) {
    Caff_Parser_WrapperPINVOKE.CharVector_Insert(swigCPtr, index, x);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, CharVector values) {
    Caff_Parser_WrapperPINVOKE.CharVector_InsertRange(swigCPtr, index, CharVector.getCPtr(values));
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    Caff_Parser_WrapperPINVOKE.CharVector_RemoveAt(swigCPtr, index);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    Caff_Parser_WrapperPINVOKE.CharVector_RemoveRange(swigCPtr, index, count);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public static CharVector Repeat(char value, int count) {
    global::System.IntPtr cPtr = Caff_Parser_WrapperPINVOKE.CharVector_Repeat(value, count);
    CharVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new CharVector(cPtr, true);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    Caff_Parser_WrapperPINVOKE.CharVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    Caff_Parser_WrapperPINVOKE.CharVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, CharVector values) {
    Caff_Parser_WrapperPINVOKE.CharVector_SetRange(swigCPtr, index, CharVector.getCPtr(values));
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(char value) {
    bool ret = Caff_Parser_WrapperPINVOKE.CharVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(char value) {
    int ret = Caff_Parser_WrapperPINVOKE.CharVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(char value) {
    int ret = Caff_Parser_WrapperPINVOKE.CharVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(char value) {
    bool ret = Caff_Parser_WrapperPINVOKE.CharVector_Remove(swigCPtr, value);
    return ret;
  }

}

}
namespace TeamF_Api {

public partial class Parser : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Parser(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Parser obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Parser() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Caff_Parser_WrapperPINVOKE.delete_Parser(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual Caff parseCaff(string filename) {
    Caff ret = new Caff((SwigDerivedClassHasMethod("parseCaff", swigMethodTypes0) ? Caff_Parser_WrapperPINVOKE.Parser_parseCaffSwigExplicitParser(swigCPtr, filename) : Caff_Parser_WrapperPINVOKE.Parser_parseCaff(swigCPtr, filename)), true);
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Parser() : this(Caff_Parser_WrapperPINVOKE.new_Parser(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("parseCaff", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateParser_0(SwigDirectorMethodparseCaff);
    Caff_Parser_WrapperPINVOKE.Parser_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Parser));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorMethodparseCaff(string filename) {
    return Caff.getCPtr(parseCaff(filename)).Handle;
  }

  public delegate global::System.IntPtr SwigDelegateParser_0(string filename);

  private SwigDelegateParser_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(string) };
}

}
namespace TeamF_Api {

public partial class Caff : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Caff(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Caff obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Caff() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Caff_Parser_WrapperPINVOKE.delete_Caff(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public partial class Pixel : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Pixel(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Pixel obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Pixel() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            Caff_Parser_WrapperPINVOKE.delete_Caff_Pixel(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public byte r {
      set {
        Caff_Parser_WrapperPINVOKE.Caff_Pixel_r_set(swigCPtr, value);
      } 
      get {
        byte ret = Caff_Parser_WrapperPINVOKE.Caff_Pixel_r_get(swigCPtr);
        return ret;
      } 
    }
  
    public byte g {
      set {
        Caff_Parser_WrapperPINVOKE.Caff_Pixel_g_set(swigCPtr, value);
      } 
      get {
        byte ret = Caff_Parser_WrapperPINVOKE.Caff_Pixel_g_get(swigCPtr);
        return ret;
      } 
    }
  
    public byte b {
      set {
        Caff_Parser_WrapperPINVOKE.Caff_Pixel_b_set(swigCPtr, value);
      } 
      get {
        byte ret = Caff_Parser_WrapperPINVOKE.Caff_Pixel_b_get(swigCPtr);
        return ret;
      } 
    }
  
    public Pixel() : this(Caff_Parser_WrapperPINVOKE.new_Caff_Pixel(), true) {
    }
  
  }

  public partial class Ciff : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Ciff(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Ciff obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Ciff() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            Caff_Parser_WrapperPINVOKE.delete_Caff_Ciff(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public Ciff(SWIGTYPE_p_std__shared_ptrT_CaffAnimation_t anim) : this(Caff_Parser_WrapperPINVOKE.new_Caff_Ciff(SWIGTYPE_p_std__shared_ptrT_CaffAnimation_t.getCPtr(anim)), true) {
      if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public virtual ulong getWidth() {
      ulong ret = Caff_Parser_WrapperPINVOKE.Caff_Ciff_getWidth(swigCPtr);
      return ret;
    }
  
    public virtual ulong getHeight() {
      ulong ret = Caff_Parser_WrapperPINVOKE.Caff_Ciff_getHeight(swigCPtr);
      return ret;
    }
  
    public virtual CharVector getCaption() {
      CharVector ret = new CharVector(Caff_Parser_WrapperPINVOKE.Caff_Ciff_getCaption(swigCPtr), true);
      return ret;
    }
  
    public virtual CharVector getTags() {
      CharVector ret = new CharVector(Caff_Parser_WrapperPINVOKE.Caff_Ciff_getTags(swigCPtr), true);
      return ret;
    }
  
    public virtual ulong getDuration() {
      ulong ret = Caff_Parser_WrapperPINVOKE.Caff_Ciff_getDuration(swigCPtr);
      return ret;
    }
  
    public virtual Caff.Pixel getPixelAt(ulong col, ulong row) {
      Caff.Pixel ret = new Caff.Pixel(Caff_Parser_WrapperPINVOKE.Caff_Ciff_getPixelAt(swigCPtr, col, row), true);
      return ret;
    }
  
  }

  public Caff(SWIGTYPE_p_std__shared_ptrT_CaffNative_t caff) : this(Caff_Parser_WrapperPINVOKE.new_Caff(SWIGTYPE_p_std__shared_ptrT_CaffNative_t.getCPtr(caff)), true) {
    if (Caff_Parser_WrapperPINVOKE.SWIGPendingException.Pending) throw Caff_Parser_WrapperPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual ulong getAnimationNumber() {
    ulong ret = (SwigDerivedClassHasMethod("getAnimationNumber", swigMethodTypes0) ? Caff_Parser_WrapperPINVOKE.Caff_getAnimationNumberSwigExplicitCaff(swigCPtr) : Caff_Parser_WrapperPINVOKE.Caff_getAnimationNumber(swigCPtr));
    return ret;
  }

  public virtual ushort getYear() {
    ushort ret = (SwigDerivedClassHasMethod("getYear", swigMethodTypes1) ? Caff_Parser_WrapperPINVOKE.Caff_getYearSwigExplicitCaff(swigCPtr) : Caff_Parser_WrapperPINVOKE.Caff_getYear(swigCPtr));
    return ret;
  }

  public virtual byte getMonth() {
    byte ret = (SwigDerivedClassHasMethod("getMonth", swigMethodTypes2) ? Caff_Parser_WrapperPINVOKE.Caff_getMonthSwigExplicitCaff(swigCPtr) : Caff_Parser_WrapperPINVOKE.Caff_getMonth(swigCPtr));
    return ret;
  }

  public virtual byte getDay() {
    byte ret = (SwigDerivedClassHasMethod("getDay", swigMethodTypes3) ? Caff_Parser_WrapperPINVOKE.Caff_getDaySwigExplicitCaff(swigCPtr) : Caff_Parser_WrapperPINVOKE.Caff_getDay(swigCPtr));
    return ret;
  }

  public virtual byte getHour() {
    byte ret = (SwigDerivedClassHasMethod("getHour", swigMethodTypes4) ? Caff_Parser_WrapperPINVOKE.Caff_getHourSwigExplicitCaff(swigCPtr) : Caff_Parser_WrapperPINVOKE.Caff_getHour(swigCPtr));
    return ret;
  }

  public virtual byte getMinute() {
    byte ret = (SwigDerivedClassHasMethod("getMinute", swigMethodTypes5) ? Caff_Parser_WrapperPINVOKE.Caff_getMinuteSwigExplicitCaff(swigCPtr) : Caff_Parser_WrapperPINVOKE.Caff_getMinute(swigCPtr));
    return ret;
  }

  public virtual CharVector getCreator() {
    CharVector ret = new CharVector((SwigDerivedClassHasMethod("getCreator", swigMethodTypes6) ? Caff_Parser_WrapperPINVOKE.Caff_getCreatorSwigExplicitCaff(swigCPtr) : Caff_Parser_WrapperPINVOKE.Caff_getCreator(swigCPtr)), true);
    return ret;
  }

  public virtual Caff.Ciff getCaffAnimation(uint ix) {
    Caff.Ciff ret = new Caff.Ciff((SwigDerivedClassHasMethod("getCaffAnimation", swigMethodTypes7) ? Caff_Parser_WrapperPINVOKE.Caff_getCaffAnimationSwigExplicitCaff(swigCPtr, ix) : Caff_Parser_WrapperPINVOKE.Caff_getCaffAnimation(swigCPtr, ix)), true);
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("getAnimationNumber", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateCaff_0(SwigDirectorMethodgetAnimationNumber);
    if (SwigDerivedClassHasMethod("getYear", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateCaff_1(SwigDirectorMethodgetYear);
    if (SwigDerivedClassHasMethod("getMonth", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateCaff_2(SwigDirectorMethodgetMonth);
    if (SwigDerivedClassHasMethod("getDay", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateCaff_3(SwigDirectorMethodgetDay);
    if (SwigDerivedClassHasMethod("getHour", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateCaff_4(SwigDirectorMethodgetHour);
    if (SwigDerivedClassHasMethod("getMinute", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateCaff_5(SwigDirectorMethodgetMinute);
    if (SwigDerivedClassHasMethod("getCreator", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateCaff_6(SwigDirectorMethodgetCreator);
    if (SwigDerivedClassHasMethod("getCaffAnimation", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateCaff_7(SwigDirectorMethodgetCaffAnimation);
    Caff_Parser_WrapperPINVOKE.Caff_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(Caff));
    return hasDerivedMethod;
  }

  private ulong SwigDirectorMethodgetAnimationNumber() {
    return getAnimationNumber();
  }

  private ushort SwigDirectorMethodgetYear() {
    return getYear();
  }

  private byte SwigDirectorMethodgetMonth() {
    return getMonth();
  }

  private byte SwigDirectorMethodgetDay() {
    return getDay();
  }

  private byte SwigDirectorMethodgetHour() {
    return getHour();
  }

  private byte SwigDirectorMethodgetMinute() {
    return getMinute();
  }

  private global::System.IntPtr SwigDirectorMethodgetCreator() {
    return CharVector.getCPtr(getCreator()).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodgetCaffAnimation(uint ix) {
    return Caff.Ciff.getCPtr(getCaffAnimation(ix)).Handle;
  }

  public delegate ulong SwigDelegateCaff_0();
  public delegate ushort SwigDelegateCaff_1();
  public delegate byte SwigDelegateCaff_2();
  public delegate byte SwigDelegateCaff_3();
  public delegate byte SwigDelegateCaff_4();
  public delegate byte SwigDelegateCaff_5();
  public delegate global::System.IntPtr SwigDelegateCaff_6();
  public delegate global::System.IntPtr SwigDelegateCaff_7(uint ix);

  private SwigDelegateCaff_0 swigDelegate0;
  private SwigDelegateCaff_1 swigDelegate1;
  private SwigDelegateCaff_2 swigDelegate2;
  private SwigDelegateCaff_3 swigDelegate3;
  private SwigDelegateCaff_4 swigDelegate4;
  private SwigDelegateCaff_5 swigDelegate5;
  private SwigDelegateCaff_6 swigDelegate6;
  private SwigDelegateCaff_7 swigDelegate7;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(uint) };
}

}
namespace TeamF_Api {

class Caff_Parser_WrapperPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="SWIGRegisterExceptionCallbacks_Caff_Parser_Wrapper")]
    public static extern void SWIGRegisterExceptionCallbacks_Caff_Parser_Wrapper(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_Caff_Parser_Wrapper")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_Caff_Parser_Wrapper(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_Caff_Parser_Wrapper(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_Caff_Parser_Wrapper(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="SWIGRegisterStringCallback_Caff_Parser_Wrapper")]
    public static extern void SWIGRegisterStringCallback_Caff_Parser_Wrapper(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_Caff_Parser_Wrapper(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static Caff_Parser_WrapperPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_Clear")]
  public static extern void CharVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_Add")]
  public static extern void CharVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_size")]
  public static extern uint CharVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_capacity")]
  public static extern uint CharVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_reserve")]
  public static extern void CharVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_new_CharVector__SWIG_0")]
  public static extern global::System.IntPtr new_CharVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_new_CharVector__SWIG_1")]
  public static extern global::System.IntPtr new_CharVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_new_CharVector__SWIG_2")]
  public static extern global::System.IntPtr new_CharVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_getitemcopy")]
  public static extern char CharVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_getitem")]
  public static extern char CharVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_setitem")]
  public static extern void CharVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, char jarg3);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_AddRange")]
  public static extern void CharVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_GetRange")]
  public static extern global::System.IntPtr CharVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_Insert")]
  public static extern void CharVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, char jarg3);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_InsertRange")]
  public static extern void CharVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_RemoveAt")]
  public static extern void CharVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_RemoveRange")]
  public static extern void CharVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_Repeat")]
  public static extern global::System.IntPtr CharVector_Repeat(char jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_Reverse__SWIG_0")]
  public static extern void CharVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_Reverse__SWIG_1")]
  public static extern void CharVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_SetRange")]
  public static extern void CharVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_Contains")]
  public static extern bool CharVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_IndexOf")]
  public static extern int CharVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_LastIndexOf")]
  public static extern int CharVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_CharVector_Remove")]
  public static extern bool CharVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_delete_CharVector")]
  public static extern void delete_CharVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Parser_parseCaff")]
  public static extern global::System.IntPtr Parser_parseCaff(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Parser_parseCaffSwigExplicitParser")]
  public static extern global::System.IntPtr Parser_parseCaffSwigExplicitParser(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_delete_Parser")]
  public static extern void delete_Parser(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_new_Parser")]
  public static extern global::System.IntPtr new_Parser();

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Parser_director_connect")]
  public static extern void Parser_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, Parser.SwigDelegateParser_0 delegate0);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Pixel_r_set")]
  public static extern void Caff_Pixel_r_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Pixel_r_get")]
  public static extern byte Caff_Pixel_r_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Pixel_g_set")]
  public static extern void Caff_Pixel_g_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Pixel_g_get")]
  public static extern byte Caff_Pixel_g_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Pixel_b_set")]
  public static extern void Caff_Pixel_b_set(global::System.Runtime.InteropServices.HandleRef jarg1, byte jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Pixel_b_get")]
  public static extern byte Caff_Pixel_b_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_new_Caff_Pixel")]
  public static extern global::System.IntPtr new_Caff_Pixel();

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_delete_Caff_Pixel")]
  public static extern void delete_Caff_Pixel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_new_Caff_Ciff")]
  public static extern global::System.IntPtr new_Caff_Ciff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Ciff_getWidth")]
  public static extern ulong Caff_Ciff_getWidth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Ciff_getHeight")]
  public static extern ulong Caff_Ciff_getHeight(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Ciff_getCaption")]
  public static extern global::System.IntPtr Caff_Ciff_getCaption(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Ciff_getTags")]
  public static extern global::System.IntPtr Caff_Ciff_getTags(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Ciff_getDuration")]
  public static extern ulong Caff_Ciff_getDuration(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_Ciff_getPixelAt")]
  public static extern global::System.IntPtr Caff_Ciff_getPixelAt(global::System.Runtime.InteropServices.HandleRef jarg1, ulong jarg2, ulong jarg3);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_delete_Caff_Ciff")]
  public static extern void delete_Caff_Ciff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_new_Caff")]
  public static extern global::System.IntPtr new_Caff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_delete_Caff")]
  public static extern void delete_Caff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getAnimationNumber")]
  public static extern ulong Caff_getAnimationNumber(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getAnimationNumberSwigExplicitCaff")]
  public static extern ulong Caff_getAnimationNumberSwigExplicitCaff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getYear")]
  public static extern ushort Caff_getYear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getYearSwigExplicitCaff")]
  public static extern ushort Caff_getYearSwigExplicitCaff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getMonth")]
  public static extern byte Caff_getMonth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getMonthSwigExplicitCaff")]
  public static extern byte Caff_getMonthSwigExplicitCaff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getDay")]
  public static extern byte Caff_getDay(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getDaySwigExplicitCaff")]
  public static extern byte Caff_getDaySwigExplicitCaff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getHour")]
  public static extern byte Caff_getHour(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getHourSwigExplicitCaff")]
  public static extern byte Caff_getHourSwigExplicitCaff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getMinute")]
  public static extern byte Caff_getMinute(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getMinuteSwigExplicitCaff")]
  public static extern byte Caff_getMinuteSwigExplicitCaff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getCreator")]
  public static extern global::System.IntPtr Caff_getCreator(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getCreatorSwigExplicitCaff")]
  public static extern global::System.IntPtr Caff_getCreatorSwigExplicitCaff(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getCaffAnimation")]
  public static extern global::System.IntPtr Caff_getCaffAnimation(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_getCaffAnimationSwigExplicitCaff")]
  public static extern global::System.IntPtr Caff_getCaffAnimationSwigExplicitCaff(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="CSharp_TeamF_Api_Caff_director_connect")]
  public static extern void Caff_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, Caff.SwigDelegateCaff_0 delegate0, Caff.SwigDelegateCaff_1 delegate1, Caff.SwigDelegateCaff_2 delegate2, Caff.SwigDelegateCaff_3 delegate3, Caff.SwigDelegateCaff_4 delegate4, Caff.SwigDelegateCaff_5 delegate5, Caff.SwigDelegateCaff_6 delegate6, Caff.SwigDelegateCaff_7 delegate7);


class Invalid_Extension_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Extension_Exception" + "RegisterCallback")]
    public static extern void Invalid_Extension_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Extension_Exception(message));
    }

    static Invalid_Extension_ExceptionHelper() {
        Invalid_Extension_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Extension_ExceptionHelper _Invalid_Extension_ExceptionHelper = new Invalid_Extension_ExceptionHelper();



class Unable_To_Open_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Unable_To_Open_Exception" + "RegisterCallback")]
    public static extern void Unable_To_Open_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Unable_To_Open_Exception(message));
    }

    static Unable_To_Open_ExceptionHelper() {
        Unable_To_Open_ExceptionRegisterCallback(customDelegate);
    }
}
static Unable_To_Open_ExceptionHelper _Unable_To_Open_ExceptionHelper = new Unable_To_Open_ExceptionHelper();



class Unable_To_Close_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Unable_To_Close_Exception" + "RegisterCallback")]
    public static extern void Unable_To_Close_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Unable_To_Close_Exception(message));
    }

    static Unable_To_Close_ExceptionHelper() {
        Unable_To_Close_ExceptionRegisterCallback(customDelegate);
    }
}
static Unable_To_Close_ExceptionHelper _Unable_To_Close_ExceptionHelper = new Unable_To_Close_ExceptionHelper();



class Multiple_Header_Block_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Multiple_Header_Block_Exception" + "RegisterCallback")]
    public static extern void Multiple_Header_Block_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Multiple_Header_Block_Exception(message));
    }

    static Multiple_Header_Block_ExceptionHelper() {
        Multiple_Header_Block_ExceptionRegisterCallback(customDelegate);
    }
}
static Multiple_Header_Block_ExceptionHelper _Multiple_Header_Block_ExceptionHelper = new Multiple_Header_Block_ExceptionHelper();



class Multiple_Credits_Block_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Multiple_Credits_Block_Exception" + "RegisterCallback")]
    public static extern void Multiple_Credits_Block_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Multiple_Credits_Block_Exception(message));
    }

    static Multiple_Credits_Block_ExceptionHelper() {
        Multiple_Credits_Block_ExceptionRegisterCallback(customDelegate);
    }
}
static Multiple_Credits_Block_ExceptionHelper _Multiple_Credits_Block_ExceptionHelper = new Multiple_Credits_Block_ExceptionHelper();



class Invalid_Caff_File_Size_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Caff_File_Size_Exception" + "RegisterCallback")]
    public static extern void Invalid_Caff_File_Size_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Caff_File_Size_Exception(message));
    }

    static Invalid_Caff_File_Size_ExceptionHelper() {
        Invalid_Caff_File_Size_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Caff_File_Size_ExceptionHelper _Invalid_Caff_File_Size_ExceptionHelper = new Invalid_Caff_File_Size_ExceptionHelper();



class Invalid_Data_Size_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Data_Size_Exception" + "RegisterCallback")]
    public static extern void Invalid_Data_Size_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Data_Size_Exception(message));
    }

    static Invalid_Data_Size_ExceptionHelper() {
        Invalid_Data_Size_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Data_Size_ExceptionHelper _Invalid_Data_Size_ExceptionHelper = new Invalid_Data_Size_ExceptionHelper();



class Invalid_Caff_Magic_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Caff_Magic_Exception" + "RegisterCallback")]
    public static extern void Invalid_Caff_Magic_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Caff_Magic_Exception(message));
    }

    static Invalid_Caff_Magic_ExceptionHelper() {
        Invalid_Caff_Magic_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Caff_Magic_ExceptionHelper _Invalid_Caff_Magic_ExceptionHelper = new Invalid_Caff_Magic_ExceptionHelper();



class Invalid_Ciff_Magic_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Ciff_Magic_Exception" + "RegisterCallback")]
    public static extern void Invalid_Ciff_Magic_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Ciff_Magic_Exception(message));
    }

    static Invalid_Ciff_Magic_ExceptionHelper() {
        Invalid_Ciff_Magic_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Ciff_Magic_ExceptionHelper _Invalid_Ciff_Magic_ExceptionHelper = new Invalid_Ciff_Magic_ExceptionHelper();



class Invalid_Block_Id_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Block_Id_Exception" + "RegisterCallback")]
    public static extern void Invalid_Block_Id_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Block_Id_Exception(message));
    }

    static Invalid_Block_Id_ExceptionHelper() {
        Invalid_Block_Id_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Block_Id_ExceptionHelper _Invalid_Block_Id_ExceptionHelper = new Invalid_Block_Id_ExceptionHelper();



class Invalid_Block_Order_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Block_Order_Exception" + "RegisterCallback")]
    public static extern void Invalid_Block_Order_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Block_Order_Exception(message));
    }

    static Invalid_Block_Order_ExceptionHelper() {
        Invalid_Block_Order_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Block_Order_ExceptionHelper _Invalid_Block_Order_ExceptionHelper = new Invalid_Block_Order_ExceptionHelper();



class Invalid_Header_Size_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Header_Size_Exception" + "RegisterCallback")]
    public static extern void Invalid_Header_Size_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Header_Size_Exception(message));
    }

    static Invalid_Header_Size_ExceptionHelper() {
        Invalid_Header_Size_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Header_Size_ExceptionHelper _Invalid_Header_Size_ExceptionHelper = new Invalid_Header_Size_ExceptionHelper();



class Invalid_Caption_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Caption_Exception" + "RegisterCallback")]
    public static extern void Invalid_Caption_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Caption_Exception(message));
    }

    static Invalid_Caption_ExceptionHelper() {
        Invalid_Caption_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Caption_ExceptionHelper _Invalid_Caption_ExceptionHelper = new Invalid_Caption_ExceptionHelper();



class Invalid_Tags_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Tags_Exception" + "RegisterCallback")]
    public static extern void Invalid_Tags_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Tags_Exception(message));
    }

    static Invalid_Tags_ExceptionHelper() {
        Invalid_Tags_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Tags_ExceptionHelper _Invalid_Tags_ExceptionHelper = new Invalid_Tags_ExceptionHelper();



class Invalid_Year_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Year_Exception" + "RegisterCallback")]
    public static extern void Invalid_Year_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Year_Exception(message));
    }

    static Invalid_Year_ExceptionHelper() {
        Invalid_Year_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Year_ExceptionHelper _Invalid_Year_ExceptionHelper = new Invalid_Year_ExceptionHelper();



class Invalid_Month_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Month_Exception" + "RegisterCallback")]
    public static extern void Invalid_Month_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Month_Exception(message));
    }

    static Invalid_Month_ExceptionHelper() {
        Invalid_Month_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Month_ExceptionHelper _Invalid_Month_ExceptionHelper = new Invalid_Month_ExceptionHelper();



class Invalid_Day_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Day_Exception" + "RegisterCallback")]
    public static extern void Invalid_Day_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Day_Exception(message));
    }

    static Invalid_Day_ExceptionHelper() {
        Invalid_Day_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Day_ExceptionHelper _Invalid_Day_ExceptionHelper = new Invalid_Day_ExceptionHelper();



class Invalid_Hour_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Hour_Exception" + "RegisterCallback")]
    public static extern void Invalid_Hour_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Hour_Exception(message));
    }

    static Invalid_Hour_ExceptionHelper() {
        Invalid_Hour_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Hour_ExceptionHelper _Invalid_Hour_ExceptionHelper = new Invalid_Hour_ExceptionHelper();



class Invalid_Min_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Min_Exception" + "RegisterCallback")]
    public static extern void Invalid_Min_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Min_Exception(message));
    }

    static Invalid_Min_ExceptionHelper() {
        Invalid_Min_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Min_ExceptionHelper _Invalid_Min_ExceptionHelper = new Invalid_Min_ExceptionHelper();



class Invalid_Date_ExceptionHelper {
    public delegate void CustomExceptionDelegate(string message);
    static CustomExceptionDelegate customDelegate = new CustomExceptionDelegate(SetPendingCustomException);

    [global::System.Runtime.InteropServices.DllImport("Caff_Parser_Wrapper", EntryPoint="Invalid_Date_Exception" + "RegisterCallback")]
    public static extern void Invalid_Date_ExceptionRegisterCallback(CustomExceptionDelegate customCallback);

    static void SetPendingCustomException(string message) {
        SWIGPendingException.Set(new Invalid_Date_Exception(message));
    }

    static Invalid_Date_ExceptionHelper() {
        Invalid_Date_ExceptionRegisterCallback(customDelegate);
    }
}
static Invalid_Date_ExceptionHelper _Invalid_Date_ExceptionHelper = new Invalid_Date_ExceptionHelper();

}

}
namespace TeamF_Api {



public class Invalid_Extension_Exception : global::System.ApplicationException {
	public Invalid_Extension_Exception(string message) : base(message) {}
}
public class Unable_To_Open_Exception : global::System.ApplicationException {
	public Unable_To_Open_Exception(string message) : base(message) {}
}
public class Unable_To_Close_Exception : global::System.ApplicationException {
	public Unable_To_Close_Exception(string message) : base(message) {}
}
public class Multiple_Header_Block_Exception : global::System.ApplicationException {
	public Multiple_Header_Block_Exception(string message) : base(message) {}
}
public class Multiple_Credits_Block_Exception : global::System.ApplicationException {
	public Multiple_Credits_Block_Exception(string message) : base(message) {}
}
public class Invalid_Caff_File_Size_Exception : global::System.ApplicationException {
	public Invalid_Caff_File_Size_Exception(string message) : base(message) {}
}
public class Invalid_Data_Size_Exception : global::System.ApplicationException {
	public Invalid_Data_Size_Exception(string message) : base(message) {}
}
public class Invalid_Caff_Magic_Exception : global::System.ApplicationException {
	public Invalid_Caff_Magic_Exception(string message) : base(message) {}
}
public class Invalid_Ciff_Magic_Exception : global::System.ApplicationException {
	public Invalid_Ciff_Magic_Exception(string message) : base(message) {}
}
public class Invalid_Block_Id_Exception : global::System.ApplicationException {
	public Invalid_Block_Id_Exception(string message) : base(message) {}
}
public class Invalid_Block_Order_Exception : global::System.ApplicationException {
	public Invalid_Block_Order_Exception(string message) : base(message) {}
}
public class Invalid_Header_Size_Exception : global::System.ApplicationException {
	public Invalid_Header_Size_Exception(string message) : base(message) {}
}
public class Invalid_Caption_Exception : global::System.ApplicationException {
	public Invalid_Caption_Exception(string message) : base(message) {}
}
public class Invalid_Tags_Exception : global::System.ApplicationException {
	public Invalid_Tags_Exception(string message) : base(message) {}
}
public class Invalid_Year_Exception : global::System.ApplicationException {
	public Invalid_Year_Exception(string message) : base(message) {}
}
public class Invalid_Month_Exception : global::System.ApplicationException {
	public Invalid_Month_Exception(string message) : base(message) {}
}
public class Invalid_Day_Exception : global::System.ApplicationException {
	public Invalid_Day_Exception(string message) : base(message) {}
}
public class Invalid_Hour_Exception : global::System.ApplicationException {
	public Invalid_Hour_Exception(string message) : base(message) {}
}
public class Invalid_Min_Exception : global::System.ApplicationException {
	public Invalid_Min_Exception(string message) : base(message) {}
}
public class Invalid_Date_Exception : global::System.ApplicationException {
	public Invalid_Date_Exception(string message) : base(message) {}
}

public class Caff_Parser_Wrapper {
}

}
namespace TeamF_Api {

public class SWIGTYPE_p_std__shared_ptrT_CaffNative_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__shared_ptrT_CaffNative_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__shared_ptrT_CaffNative_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__shared_ptrT_CaffNative_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace TeamF_Api {

public class SWIGTYPE_p_std__shared_ptrT_CaffAnimation_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_std__shared_ptrT_CaffAnimation_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_std__shared_ptrT_CaffAnimation_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_std__shared_ptrT_CaffAnimation_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
